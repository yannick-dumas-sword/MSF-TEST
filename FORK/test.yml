- name: Deploy DHIS VM on Hyper-V
  hosts: GCH001PHYP001P
  #Let's goooooooo
  tasks:
  
    - name: Registering facts for VM configuration
      set_fact:
        vm_name: "GCH001VDHIS002Y"
        ip_address: "10.216.4.152"
      
    - name: Creating dynamic Ansible host for the VM
      add_host:
        name: "{{ ip_address }}"
        groups: new_vm_host
        ansible_ssh_extra_args: '-o StrictHostKeyChecking=no'
        ansible_ssh_user: "{{ lookup('env', 'vm_username') }}"
        ansible_ssh_pass: "{{ lookup('env', 'vm_password') }}"
        ansible_sudo_pass: "{{ lookup('env', 'vm_password') }}"
      vars:
        ansible_remote_tmp: /tmp/.ansible/tmp

        
    - name: Create temporary file with hostname content
      win_tempfile:
        state: directory
      register: temp_dir

    - name: Add hostname to temporary file
      win_copy:
        dest: "{{ temp_dir.path }}\\hostname.txt"
        content: "{{ vm_name }}"
        
    - name: Copy temporary file into Linux VM
      win_shell: |
        $vmName = "{{ vm_name }}"
        $sourcePath = "{{ temp_dir.path }}\\hostname"
        $destinationPath = "/tmp/"
        Copy-VMFile -Name $vmName -SourcePath $sourcePath -DestinationPath $destinationPath -FileSource Host

        
######################################################################
#                                                                    #
#                        VM Configuration                            #
#                                                                    #
######################################################################

- name: Configure DHIS VM
  hosts: new_vm_host
  gather_facts: true
  become: true
  vars:
    public_keys_file: /SSH_Keys/ssh_dhis
        
    devices:
      - { device: '/dev/sdb', mount: '/var', temp_mount: '/mnt/var' }
      - { device: '/dev/sdc', mount: '/var/log', temp_mount: '/mnt/varlog' }
      - { device: '/dev/sdd', mount: '/home', temp_mount: '/mnt/home' }
      - { device: '/dev/sde', mount: '/home/dhis2', temp_mount: '/mnt/dhis2' }
      - { device: '/dev/sdf', mount: '/home/backup', temp_mount: '/mnt/backup' }
        
  tasks:
    - name: Set hostname to match inventory hostname
      hostname:
        name: "{{ vm_name }}"
        
    - name: Create users
      user:
        name: "{{ item.name }}"
        home: "/home{{ item.name }}"
        shell: /bin/false
        create_home: yes
      loop: "{{ users }}"
 
    - name: Create ext4 filesystem on devices
      command: mkfs.ext4 {{ item.device }}
      loop: "{{ devices }}"
      loop_control:
        label: "{{ item.device }}"

    - name: Create temporary mount points
      file:
        path: "{{ item.temp_mount }}"
        state: directory
      loop: "{{ devices }}"

    - name: Mount devices to temporary mount points
      mount:
        path: "{{ item.temp_mount }}"
        src: "{{ item.device }}"
        fstype: ext4
        state: mounted
      loop: "{{ devices }}"

    - name: Synchronize directories
      command: rsync -a "{{ item.mount }}/." "{{ item.temp_mount }}"
      loop: "{{ devices }}"

    - name: Unmount temporary mount points
      mount:
        path: "{{ item.temp_mount }}"
        state: absent
      loop: "{{ devices }}"

    - name: Mount devices to final mount points
      mount:
        path: "{{ item.mount }}"
        src: "{{ item.device }}"
        fstype: ext4
        state: mounted
        dump: 0
        passno: 0
      loop: "{{ devices }}"
      
#    - name: Install necessary packages
#      apt:
        #name: ['openjdk-11-jdk', 'postgresql', 'postgresql-contrib', 'postgis', 'tomcat9']
#        name: ['openjdk-11-jdk']
#        state: present
#        update_cache: yes

    - name: Set root authorized_keys
      authorized_key:
        user: "root"
        key: "{{ lookup('file', item) }}"
        state: present
      with_file: "{{ public_keys_file }}"

    - name: Disable password authentication
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^#?PasswordAuthentication'
        line: 'PasswordAuthentication no'
        state: present
      notify: Restart ssh

    - name: Wipe known hosts
      file:
        path: /root/.ssh/known_hosts
        state: absent

  handlers:
    - name: Restart ssh
      service:
        name: ssh
        state: restarted